#!/usr/bin/lua

local site = require 'gluon.site_config'
local util = require 'gluon.util'
local posix = require 'posix'
local uci = require('simple-uci').cursor()

posix.setgid("gluon-mesh-vpn")

--- Check if a file or directory exists in this path
function exists(file)
    local ok, err, code = os.rename(file, file)
    if not ok then
        if code == 13 then
            -- Permission denied, but it exists
            return true
        end
    end
    return ok, err
end

--- Check if a directory exists in this path
function isdir(path)
    return exists(path.."/")
end

--- Split Strings if needed
function split(str, delim)
    local result,pat,lastPos = {},"(.-)" .. delim .. "()",1
    for part, pos in string.gfind(str, pat) do
        table.insert(result, part); lastPos = pos
    end
    table.insert(result, string.sub(str, lastPos))
    return result
end

uci:section('firewall', 'include', 'mesh_vpn_dns', {
    type = 'restore',
    path = '/lib/gluon/vpn-select/iptables.rules',
    family = 'ipv4',
})

local mac_raw = util.trim(util.readfile('/sys/class/net/br-wan/address'))
local mac = string.upper(string.gsub(mac_raw, ":", ""))
local hostname = util.trim(util.readfile('/proc/sys/kernel/hostname'))
local port = ''
local pubkey = uci:get("fastd", "mesh_vpn", "pubkey")
local lat = uci:get('gluon-node-info', uci:get_first('gluon-node-info', 'location'), 'latitude') or ""
local long = uci:get('gluon-node-info', uci:get_first('gluon-node-info', 'location'), 'longitude') or ""

function make_config()
    if (pubkey == nil or pubkey == "") then
        local secret = uci:get("fastd", "mesh_vpn", "secret")
        pubkey_raw =  io.popen('uci set fastd.mesh_vpn.pubkey=$(echo "secret \\"' .. secret .. '\\";" | fastd -c - --show-key --machine-readable) && uci commit fastd && uci get fastd.mesh_vpn.pubkey'):read('*all')
        local pubkeyTable = split(pubkey_raw, "\n")
        if pubkeyTable[0] ~= nil then
            pubkey = pubkeyTable[0]
        else
            pubkey = pubkeyTable[1]
        end
    end
    
    -- Cleanup tmp dir
    os.remove("/tmp/fastd_mesh_vpn_peers/")
    os.remove("/etc/fastd/mesh_vpn/peers/")
    posix.mkdir("/tmp/")
    posix.mkdir("/tmp/fastd_mesh_vpn_peers/")
    posix.mkdir("/etc/fastd/")
    posix.mkdir("/etc/fastd/mesh_vpn/")
    posix.mkdir("/etc/fastd/mesh_vpn/peers/")

    local files = io.popen("wget -4 -T15 'http://keyserver.ffslfl.net/index.php?mac=" .. mac .. "&name=" .. hostname .. "&port=" .. port .. "&key=" .. pubkey.. "&lat=" .. lat .. "&long=" .. long.. "' -O /tmp/fastd_mesh_vpn_output && echo \"$(awk '/^####/ { gsub(/^####/, \"\", $0); gsub(/.conf/, \"\", $0); print $0; }' /tmp/fastd_mesh_vpn_output)\"", 'r'):read('*all')
    local GWTable = split(files, "\n")
    local firstGW = ''
    if GWTable[0] ~= nil then
        firstGW = GWTable[0]
    else
        firstGW = GWTable[1]
    end

    local ip_raw = io.popen("awk '{ if(a) print }; /^####" .. firstGW .. ".conf$/{a=1}; /^$/{a=0};' /tmp/fastd_mesh_vpn_output | sed 's/ float;/;/g' > /etc/fastd/mesh_vpn/peers/" .. firstGW .. " && echo 'float yes;' >> /etc/fastd/mesh_vpn/peers/" .. firstGW .. " && awk -F\\\" '/remote/ {print $2}' /etc/fastd/mesh_vpn/peers/" .. firstGW .. "", 'r'):read('*all')
    local ipTable = split(ip_raw, "\n")
    local ip = ''
    if ipTable[0] ~= nil then
        ip = ipTable[0]
    else
        ip = ipTable[1]
    end

    local enabled = uci:get('tunneldigger', 'mesh_vpn', 'enabled')

    local enabledGW = io.popen('if [ "l2tp" = "$(wget -4 -T10 http://' .. ip .. '/vpn.txt -O - 2>/dev/null)" ]; then echo 1; else echo 0; fi', 'r'):read('*all')
    
    local fdport_raw = io.popen("awk '/remote/{gsub(\";\", \"\"); print $5}' /etc/fastd/mesh_vpn/peers/" .. firstGW .. ""):read('*all')
    local fdportTable = split(fdport_raw, "\n")
    local fdport = ''
    if fdportTable[0] ~= nil then
        fdport = fdportTable[0]
    else
        fdport = fdportTable[1]
    end
    
    local l2port = fdport + 10000

    if (enabledGW ~= "0" and enabled ~= "0" and enabled ~= nil) then
        uci:set("fastd", "mesh_vpn", "enabled", "0")
        -- Delete old broker config section
        if not uci:get('tunneldigger', 'mesh_vpn') then
            uci:delete_all('tunneldigger', 'broker')
        end

        uci:section('tunneldigger', 'broker', 'mesh_vpn', {
            enabled = enabled,
            uuid = util.node_id(),
            interface = 'mesh-vpn',
            bind_interface = 'br-wan',
            group = 'gluon-mesh-vpn',
            broker_selection = 'usage',
            address = "" .. ip .. ":" .. l2port .. "",
        })

        uci:commit('tunneldigger')
        os.remove("/etc/fastd/mesh_vpn/peers/")
    else
        uci:set("fastd", "mesh_vpn", "enabled", "1")
    end
end

if isdir('/tmp/fastd_mesh_vpn_peers') then
    local sumold = io.popen("sha256sum /etc/config/tunneldigger"):read('*all')
    make_config()
    local sumnew = io.popen("sha256sum /etc/config/tunneldigger"):read('*all')
    if sumold ~= sumnew then
        io.popen('/etc/init.d/tunneldigger restart')
    end
    io.popen('/etc/init.d/fastd reload')
    
    local fastd_running_status_raw = io.popen('netstat -tulpn | grep fastd'):read('*all')
    local fastd_running_statusTable = split(fastd_running_status_raw, "\n")
    local fastd_running_status = ''
    if fastd_running_statusTable[0] ~= nil then
        fastd_running_status = fastd_running_statusTable[0]
    else
        fastd_running_status = fastd_running_statusTable[1]
    end
    
    if isdir('/etc/fastd/mesh_vpn/peers/') then
        if (fastd_running_status == nil or fastd_running_status == "" or fastd_running_status == "netstat: showing only processes with your user ID") then
            io.popen('/etc/init.d/fastd start')
        end
    else
        if fastd_running_status ~= nil then
            io.popen('/etc/init.d/fastd stop')
        end
    end
else
    posix.mkdir('/tmp/fastd_mesh_vpn_peers')
    local secret = io.popen('egrep "option secret \'[0-9a-f]{64}\'" /etc/config/fastd'):read('*all')
    if (secret == nil or secret == "") then
        local secret_raw = io.popen("fastd --generate-key 2>&1 |  awk '/[Ss]ecret/ { print $2 }'"):read('*all')
        local secret_table = split(secret_raw, "\n")
        local secret = ''
        if secret_table[0] ~= nil then
            secret = secret_table[0]
        else
            secret = secret_table[1]
        end
        uci:set('fastd', 'mesh_vpn', 'secret', secret)
        uci:save('fastd')
    end
    make_config()
    io.popen('/etc/init.d/fastd start')
    io.popen('/etc/init.d/tunneldigger start')
end
